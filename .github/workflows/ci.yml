name: Matrix-Multiplication CI

on: [ push, pull_request ]

concurrency:
  group: '${{ github.event_name }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup | MPI
        id: mpi-setup
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: 'openmpi'

      # Program compilation
      - name: Setup | CMake
        id: cmake-setup
        uses: jwlawson/actions-setup-cmake@v2
      - name: Build | Configure CMake
        id: cmake-configuration
        run: cmake -S . -B build
      - name: Build | Executables
        id: cmake-build
        run: cmake --build build

      # Unit tests
      - name: Test | Run Unit-Tests
        id: unit-tests
        run: ctest --test-dir build --output-on-failure --output-log test-report.txt

      # Static code analysis, report upload as artifact
      - name: Setup | Cppcheck
        id: cppcheck-setup
        run: sudo apt-get install cppcheck
      - name: Setup | Verify Cppcheck
        id: cppcheck-verify
        run: cppcheck --version
      - name: SCA | Cppcheck
        id: sca-cppcheck
        run: cppcheck --enable=all --inconclusive --std=c++17 src --output-file=sca-report.txt
      - name: SCA | Upload Cppcheck report
        id: sca-cppcheck-upload
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: sca-report.txt
          if-no-files-found: error
          retention-days: 10

      # Setup Singularity dependencies, Go for compiling, Singularity
#      - name: Setup | Singularity dependencies
#        id: singularity-dep-setup
#        run: |
#          sudo apt-get update && sudo apt-get install -y \
#            autoconf \
#            automake \
#            cryptsetup \
#            git \
#            libfuse-dev \
#            libglib2.0-dev \
#            libseccomp-dev \
#            libtool \
#            pkg-config \
#            runc \
#            squashfs-tools \
#            squashfs-tools-ng \
#            uidmap \
#            wget \
#            zlib1g-dev
#      - name: Setup | Go
#        id: go-setup
#        run: |
#          export GO_VERSION=1.22.3 GO_OS=linux GO_ARCH=amd64
#          wget https://go.dev/dl/go$GO_VERSION.$GO_OS-$GO_ARCH.tar.gz
#          sudo tar -C /usr/local -xzvf go$GO_VERSION.$GO_OS-$GO_ARCH.tar.gz
#          rm go$GO_VERSION.$GO_OS-$GO_ARCH.tar.gz
#          echo 'export PATH=$PATH:/usr/local/go/bin' >> $GITHUB_ENV
#          echo 'PATH=$PATH:/usr/local/go/bin' >> $GITHUB_PATH
#      - name: Setup | Verify Go
#        id: go-verify
#        run: go version
#      - name: Setup | Singularity
#        id: singularity-setup
#        run: |
#          export SINGULARITY_VERSION=4.1.3
#          wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz
#          tar -xzf singularity-ce-${SINGULARITY_VERSION}.tar.gz
#          cd singularity-ce-${SINGULARITY_VERSION}
#          ./mconfig
#          make -C builddir
#          sudo make -C builddir install
#      - name: Setup | Verify Singularity
#        id: singularity-verify
#        run: singularity --version

      # Build a Singularity container out of the Definition File in the repository, upload as artifact
#      - name: Build | Singularity image
#        id: singularity-build
#        run: sudo -E singularity build mx-multiplication.sif SingularityFile.def
#      - name: Build | Upload Singularity image
#        id: singularity-image-upload
#        uses: actions/upload-artifact@v4
#        with:
#          name: mx-multiplication.sif
#          path: mx-multiplication.sif
#          if-no-files-found: error
#          retention-days: 10


  deploy:
    # To be executed after build-and-test stage
    needs:
      - build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: test
        run: exit 1
      # Tool to avoid interactive password input on following ssh connection requests
      - name: Setup | SSHPass
        id: sshpass-setup
        run: sudo apt-get install sshpass

      # Deploy of the Singularity image on the remote cluster
      - name: Setup | Download Singularity image
        id: singularity-image-download
        uses: actions/download-artifact@v4
        with:
          name: mx-multiplication.sif
      - name: Deploy | Singularity image
        id: singularity-image-deploy
        run: |
          sshpass -p '${{ secrets.CINECA_SECRET }}' scp -o PreferredAuthentications=password -o StrictHostKeyChecking=no mx-multiplication.sif a08trb53@login.g100.cineca.it:~

      # Deploy of the job script (Slurm sbatch) on the remote cluster
      - name: Deploy | Slurm job descriptor
        id: sbatch-job-deploy
        run: |
          ssh-keygen -R "login.g100.cineca.it"
          sshpass -p '${{ secrets.CINECA_SECRET }}' scp -o PreferredAuthentications=password -o StrictHostKeyChecking=no job.sh a08trb53@login.g100.cineca.it:~
      # Prompt remote cluster for job scheduling
      - name: Deploy | Enqueue job via Slurm
        id: sbatch-job
        run: |
          ssh-keygen -R "login.g100.cineca.it"
          sshpass -p '${{ secrets.CINECA_SECRET }}' ssh -o PreferredAuthentications=password -o StrictHostKeyChecking=no a08trb53@login.g100.cineca.it 'sbatch job.sh'


  notify:
    runs-on: ubuntu-latest
    # To be executed anyway
    if: ${{ always() }}
    needs:
      - build-and-test
      - deploy
    steps:
      # Notify a failure if any of the previous jobs has failed
      - name: Notification | Failure via Telegram se4hpc_ci_bot
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_SE4HPC_CI_BOT_TOKEN }}
          message: |
            Hey... ${{ github.repository }} CI pipeline failed :(((
            @${{ github.actor }} committed: '${{ github.event.head_commit.message }}'
            See changes at https://github.com/${{ github.repository }}/commit/${{github.sha}}
      # Notify a success if each of the previous jobs has been successful
      - name: Notification | Success via Telegram se4hpc_ci_bot
        if: ${{ !contains(join(needs.*.result, ','), 'failure') }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_SE4HPC_CI_BOT_TOKEN }}
          message: |
            Hey!! ${{ github.repository }} CI pipeline worked for latest commit :DDD
            @${{ github.actor }} committed: '${{ github.event.head_commit.message }}'
            See changes at https://github.com/${{ github.repository }}/commit/${{github.sha}}